@node    New release
@chapter New release


@itemize @bullet
@item
Update files @code{NEWS} and @code{ChangeLog}


@item @c --------------------------------------------------------------------
Update release version in the following three files

@verbatim
   configure.ac
   lib/gnu_gama/version.cpp
   CMakeLists.txt
@end verbatim

@noindent
Unit test @code{tests/gama-local/gama-local-version} checks that the
release version is identical in all these files (run @code{make check}).



@item  @c -------------------------------------------------------------------
Run full set of unit tests with @emph{extra tests} enabled

@verbatim
   ./autogen.sh
   ./configure  --enable-extra-tests
   make check
@end verbatim

@noindent
Autogen script usually only needs to run for the first time after
substantial changes in the project configuration.


@item  @c -------------------------------------------------------------------
GNU Gama comes with an alternative @code{cmake} build system defined in
CMakeLists.txt with a limited set of unit tests. This @emph{unofficial}
build is available for users who need to to build Gama on Windows
without the MinGW development enviroment, either directly with Visual
Studio or within Windows Subsystem for Linux (WSL).

@code{gama-local-version} unit test cannot check if all file names are
properly defined in @code{CMakeLists.txt} and you need to check the
@emph{cmake build}, for example like this

@verbatim
   mkdir build      # temporary directory
   cd build
   cmake ..
   make
   ctest
@end verbatim

@noindent
or if you want to use the Ninja build system for a faster run

@verbatim
   cmake .. -GNinja
   ninja
   ctest
@end verbatim

@noindent
The following steps work on Windows as well as Linux:

@verbatim
   mkdir build
   cd build
   cmake ..
   cmake --build . --config Release
   ctest -C Release
@end verbatim

@item  @c -------------------------------------------------------------------
Now we need to check if all the files have been committed to the Gama git server. Create a
@code{working/temporary} directory, clone the project and repeat all the
steps above

@verbatim
   git clone https://git.savannah.gnu.org/git/gama.git temp-gama
   cd temp-gama
@end verbatim


@item @c --------------------------------------------------------------------
If everything passed, you can generate the new distribution
tarball

@verbatim
   ./autogen.sh
   ./configure
   make distcheck
@end verbatim


@item @c --------------------------------------------------------------------
Now when you have the release tarball ready (for example
@code{gama-2.10.tar.gz}), you tag the git repository, for example

@verbatim
   git tag gama-2.10
@end verbatim

@noindent
Push the tag to the repository (set the origin repo to ssh first):

@verbatim
   git remote set-url origin ssh://user@git.sv.gnu.org/srv/git/gama.git
   git push origin --tags
@end verbatim

@noindent
where @emph{user} is your login name.

@item
You also have to send an email about the new release to
@code{info-gama@@gnu.org} and @code{info-gnu@@gnu.org}, describing what
is new in the release and what bugs were fixed (if any). Here is an
example text sent for version 2.09

@verbatim
Subject: GNU gama 2.09 released

We are pleased to announce the release of GNU Gama 2.09.

There is one major fix visible to end users. Implicit value of XML
parameter 'update_constrained_coordinates' was changed to "yes". The
behavior of adjustment calculation was well and clearly described in
the documentation, but in some cases the old implicit value ("no")
might had lead to poor numerical results. The input data XML parameter
'update_constrained_coordinates' is preserved only for backward
compatibility and is likely to be removed in some future release.

Several other minor internal issues were fixed, none of them visible to
end users.

About

GNU Gama package is dedicated to adjustment of geodetic networks. It
is intended for use with traditional geodetic surveyings which are
still used and needed in special measurements (e.g., underground or
high precision engineering measurements) where the Global Positioning
System (GPS) cannot be used.

Adjustment in local coordinate systems is fully supported by a
command-line program gama-local that adjusts geodetic (free) networks
of observed distances, directions, angles, height differences, 3D
vectors and observed coordinates (coordinates with given
variance-covariance matrix). Adjustment in global coordinate systems
is supported only partly as a gama-g3 program.

https://www.gnu.org/software/gama/
@end verbatim

@end itemize


@section Generate an announcement message @c ********************************

The announce message can and should be generated with
@code{announce-gen} script from directory @code{build-aux} of GNU
Gnulib @url{https://www.gnu.org/software/gnulib/manual/gnulib.html}

@verbatim
./announce-gen --help
Usage: announce-gen [OPTIONS]
Generate an announcement message.  Run this from builddir.

OPTIONS:

These options must be specified:

   --release-type=TYPE          TYPE must be one of alpha beta stable
   --package-name=PACKAGE_NAME
   --previous-version=VER
   --current-version=VER
   --gpg-key-id=ID         The GnuPG ID of the key used to sign the tarballs
   --url-directory=URL_DIR

The following are optional:

   --news=NEWS_FILE             include the NEWS section about this release
                                from this NEWS_FILE; accumulates.
      ......
@end verbatim

@noindent For example:
@verbatim
./announce-gen --package-name gama \
	       --release-type stable \
	       --current-version 2.11 \
	       --previous-version 2.10 \
	       --gpg-key-id 1b77fc09 \
	       --url https://ftp.gnu.org/gnu/gama \
               --news NEWS
@end verbatim

Including the @code{NEWS} file (the NEWS section about this release)
is highly recommended, @code{NEWS} are generally more interesting to
users rather than ChangeLog, which is of interest mainly to developpers.



@section Builds on WSL @c **************************************************

This section is given with no guarantee, GNU Gama is not tested on
Windows Subsystem Linux. It seems that on WSL you need to install

@verbatim
   sudo apt install automake
   sudo apt install build-essential
@end verbatim

@noindent
and it seems that you also need to explicitly enable build with local copy
of expat parser

@verbatim
   ./autogen
   ./configure --enable-expat_1_1  --enable-extra-tests

   make check    # build all and run all tests including the extra tests
@end verbatim


@section Distributing the new release @c ************************************

For uploading new release tarball to the GNU FTP server, use script
@code{gnupload} from directory @code{build-aux} from @b{GNU
portability library} (gnulib, see
@url{https://savannah.gnu.org/git/?group=gnulib})

@verbatim
   git clone git://git.sv.gnu.org/gnulib.git
   ln -s gnulib/build-aux/gnupload     # create a symlink or copy ...
@end verbatim

To upload your new release tarball, simply run

@verbatim
   ./gnupload --to ftp.gnu.org:gama gama-2.10.tar.gz
@end verbatim

You will be asked for your gpg passphrase (twice) and you will get
an email when your upload is finished.

Similarly you can replace the tarball, in case it is needed

@verbatim
   ./gnupload --replace --to ftp.gnu.org:gama gama-2.10.tar.gz
@end verbatim

Use @code{gnupload --help} for the full list of options with examples, you
can always try running @code{gnupload} with the option @code{--dry-run}

@itemize @bullet
@item Note: If you encounter this error when running gnulib

@verbatim
   gpg: signing failed: Inappropriate ioctl for device
@end verbatim

Simply run the following in the command line:

@verbatim
   export GPG_TTY=$(tty)
@end verbatim

@end itemize


@section Online documentation @c ********************************************


To update Gama webpages and online documentation, you need to checkout
its repository from CVS (Concurrent Version System)

@verbatim
cvs -z3 -d:ext:user@cvs.savannah.gnu.org:/web/gama co -P gama
@end verbatim

@noindent
where @emph{user} is your login name.


@enumerate
@item
For generating documentation in various formats from texinfo sources,
download and run @code{gendocs} (see @code{doc/Makefile.am} for details)
@verbatim
   cd gama/doc
   make download-gendocs.sh
   make run-gendocs.sh
@end verbatim


@item
Copy the manual generated by the gendocs script from gama repository to CVS web


@item
Run script
@verbatim
   ./update-manual.sh
@end verbatim

@verbatim
#!/bin/sh

find . -type f -name "*.html" -print0 | xargs -0 cvs add
find . -type f -name "*.gz"   -print0 | xargs -0 cvs add
find . -type f -name "*.pdf"  -print0 | xargs -0 cvs add
find . -type f -name "*.txt"  -print0 | xargs -0 cvs add

for m in html_chapter html_node html_section
do
    echo
    echo manual/$m/.symlinks :
    cat manual/$m/.symlinks
done
@end verbatim


@item
add "@code{gama.html index.html}" to @code{manual/html_*/.symlinks}

@noindent
remove all files index.html from manual   # find manual -name index.html


@item
Run
@verbatim
   cvs commit .   # only cvs is available for GNU web pages, no git
@end verbatim

@end enumerate
